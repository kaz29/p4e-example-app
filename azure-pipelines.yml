
name: p4e-example-app

trigger:
  - master

variables:
  - group: p4e-example-app
  - name: Azure.CreateResources
    value: 'true' # Update Azure.CreateResources to false if you have already created resources like resource group and azure container registry.
  - name: ImageName
    value: p4eexampleapp
  - name: Azure.Location
    value: 'Japan East'
  - name: Azure.ACR.RegistryLocation
    value: 'Japan East'
  - name: Azure.ACR.Sku
    value: Standard
  - name: Azure.WebbApp.AppInsightsLocation
    value: 'Japan East'
  - name: Azure.WebbApp.Sku
    value: Standard
  - name: Azure.WebbApp.SkuCode
    value: S1
  - name: Azure.Database.Name
    value: webapp

stages:
  - stage: Build
    jobs:
      - job: CreateResources
        displayName: Create resources
        condition: and(succeeded(), eq(variables['Azure.CreateResources'], 'true'))
        pool:
          vmImage: 'Ubuntu-16.04'
        steps:
          - template: templates/createresources-steps.yml

      - job: UnitTest
        displayName: UnitTest
        condition: and(succeeded(), eq(variables['Azure.CreateResources'], 'true'))
        pool:
          vmImage: 'Ubuntu-16.04'
        steps:
          - template: templates/unittest-steps.yml
        dependsOn: CreateResources

      - job: Build
        displayName: Build
        condition: and(succeeded(), eq(variables['Azure.CreateResources'], 'true'))
        pool:
          vmImage: 'Ubuntu-16.04'
        variables:
          - group: p4e-example-app
        steps:
          - template: templates/buils-steps.yml
        dependsOn: UnitTest
  - stage: Deploy
    jobs:
      - deployment: DeployToStaging
        pool:
          vmImage: 'Ubuntu-16.04'
        # creates an environment if it doesnâ€™t exist
        environment: '$(WebAppName)-staging'
        strategy:
          # default deployment strategy
          runOnce:
            deploy:
              steps:
                - task: AzureRmWebAppDeployment@3
                  displayName: 'Deploy Azure App Service'
                  inputs:
                    azureSubscription: $(SubscriptionName)
                    appType: applinux
                    WebAppName: $(WebAppName)
                    DeployToSlotFlag: true
                    ResourceGroupName: $(ResourceGroupName)
                    SlotName: staging
                    DockerNamespace: '$(RepositoryName).azurecr.io'
                    DockerRepository: $(ImageName)
                    DockerImageTag: '$(Build.BuildId)'
                    TakeAppOfflineFlag: true
                    UseWebDeploy: true
                    RenameFilesFlag: true
      - deployment: DeployToProduction
        pool:
          vmImage: 'Ubuntu-16.04'
        environment: '$(WebAppName)-production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureAppServiceManage@0
                  displayName: 'Swap Slots'
                  inputs:
                    azureSubscription: $(SubscriptionName)
                    WebAppName: $(WebAppName)
                    ResourceGroupName: $(ResourceGroupName)
                    SourceSlot: staging
